/*
******************************************************
******************************************************
******************************************************
******************************************************
******************************************************

******************* ASSIGNMENT: 1 ********************
******************* ASSIGNMENT: 1 ********************  
******************* ASSIGNMENT: 1 ********************

******************************************************
******************************************************
******************************************************
******************************************************
******************************************************
*/


 /* ===========================================================
 * File:      p1.c
 * Copyright: 08-Feb-2020 by Ajinkya Rathod(ajinzrathod)
 * 
 * Content:   Define a structure called Criket as:
 * 		   	a. Player Name 
 * 			b. Team Name
 * 			c. Batting Average
 * 		
 *  	Declare player with 50 elements. Read data and display  
 *      team wise name of players with their batting avg.
 * ========================================================== */

// Header Files
#include <stdio.h>
#include <conio.h>
#include <string.h>

// Structure Declaration
struct cricket {
	char   teamName[50];
	char   playerName[50];
	float  average;
};

// Function inputData returing Strcuture of Cricket
struct cricket inputData()
{
	struct cricket c;
	static int count = 1;

	printf("\n Team %d \n", count++);
 
	printf(" Enter Team Name: ");
	scanf("%s",c.teamName);

	printf(" Enter Player Name: ");
	scanf("%s",c.playerName);

	printf(" Enter Batting Avg: ");
	scanf("%f",&c.average);

	return c; //Returing Entire Structure
}

// Function quicksortByTeamname
void quicksortByTeamname(struct cricket c[], int l, int r)
{
	struct cricket temp;	
	char   pivot[50]; 
	int    i, cnt;

	if (l >= r) { return; }

	strcpy(pivot, c[r].teamName);
	cnt = l;

	for (i = l; i <= r; i++) {
		if (strcmp(c[i].teamName, pivot) <= 0) {

			// Swapping Strucutre
			temp = c[i];
			c[i] = c[cnt];
			c[cnt] = temp;
			// Swapping Strucutre Ends

			cnt++;
		}
	}

	quicksortByTeamname(c, l, cnt - 2);
	quicksortByTeamname(c, cnt, r);
}

// Function sortTeamThenAverage for Descending Sort according to Average
void sortTeamThenAverage(struct cricket c[], int num)
{
	struct cricket temp;
	int i, j, count = 1, index = 1, while_loop = 1;
	char tempTeam[50];

	while(while_loop) {
		strcpy(tempTeam, c[index].teamName);

		for(i = index; i < num; i++) {
			
			if(strcmp(tempTeam, c[i].teamName) == 0) {
				count++;
			}
			else{ break; }

		}

		// Performing Bubble Sort for Average of Players
		for(i = index - 1; i < count - 1; i++) {
			for(j = index - 1; j < count - 1; j++) {

				if(c[j].average < c[j + 1].average) {

					// Swapping Strucutre
					temp = c[j];
					c[j] = c[j + 1];
					c[j + 1] = temp;	
					// Swapping Strucutre Ends

				}

			}
		}
		// Bubble Sort Over

		count++;
		index = count;

		// Stop the loop if count exceeds number of teams
		if(num <= count) {
			while_loop = 0;
		}

	}
}

// Function to display final result
int displaySortedData(struct cricket c[], int num)
{
	int i = 0, j;
	struct cricket temp	;

	// Function to sort by Team Name 
	quicksortByTeamname(c, 0, num - 1);

	// Function to sort by Average 
	sortTeamThenAverage(c, num);

	// Diplaying Data for 1st team
	printf(" * * * Team %s * * * \n", c[i].teamName);
	printf("  \tPlayer  :  %s\n",      c[i].playerName);
	printf("  \tAverage :  %.2f\n\n",  c[i].average);
	
	// Diplaying Data for rest of team
	for(i = 1; i < num; i++) {

		if(strcmp(c[i].teamName, c[i - 1].teamName) != 0) {
			printf(" * * * Team %s * * * \n", c[i].teamName);
		}

		printf("  \tPlayer  :  %s\n",     c[i].playerName);
		printf("  \tAverage :  %.2f\n\n", c[i].average);
	}
	
	return 0;
}

// Driver Program 
int main()
{
	int    n, i;
	struct cricket c[50];

	while(1) {
		printf("Enter total number of teams: ");
		scanf("%d",&n);
		if(n > 0 && n < 51) { break; } 
		else {
			printf("Invalid Input. Try Again\n");
		}
	}

	// Getting Data from user
	for(i = 0; i < n; ++i) {
		c[i] = inputData();
	}

	// Displaying Data
	displaySortedData(c, n);

	return 0; 
}



/* =================================================================
* Output :

	Enter total number of teams: 10

	 Team 1
	 Enter Team Name: csk
	 Enter Player Name: Dhaval
	 Enter Batting Avg: 55

	 Team 2
	 Enter Team Name: dd
	 Enter Player Name: Kohli
	 Enter Batting Avg: 89

	 Team 3
	 Enter Team Name: mi
	 Enter Player Name: Ajinkya
	 Enter Batting Avg: 100

	 Team 4
	 Enter Team Name: csk
	 Enter Player Name: askdka
	 Enter Batting Avg: 45

	 Team 5
	 Enter Team Name: csk
	 Enter Player Name: askhdgsa
	 Enter Batting Avg: 47

	 Team 6
	 Enter Team Name: mi
	 Enter Player Name: askjdhskaj
	 Enter Batting Avg: 78

	 Team 7
	 Enter Team Name: mi
	 Enter Player Name: Yash
	 Enter Batting Avg: 85

	 Team 8
	 Enter Team Name: dd
	 Enter Player Name: Nirav
	 Enter Batting Avg: 95

	 Team 9
	 Enter Team Name: dd
	 Enter Player Name: Pradip
	 Enter Batting Avg: 67

	 Team 10
	 Enter Team Name: csk
	 Enter Player Name: Ghanshyam
	 Enter Batting Avg: 70

	 * * * Team csk * * *
		 Player  : Ghanshyam
		 Average : 70.00

		 Player  : Dhaval
		 Average : 55.00

		 Player  : askhdgsa
		 Average : 47.00

		 Player  : askdka
		 Average : 45.00

	 * * * Team dd * * *
		 Player  : Nirav
		 Average : 95.00

		 Player  : Kohli
		 Average : 89.00

		 Player  : Pradip
		 Average : 67.00

	 * * * Team mi * * *
		 Player  : Ajinkya
		 Average : 100.00

		 Player  : Yash
		 Average : 85.00

		 Player  : askjdhskaj
		 Average : 78.00 
=================================================================*/ 



 /* ============================================================ 
 * File: p2.c
 * Copyright: 09-Feb-2020 by Ajinkya Rathod(ajinzrathod)
 *
 * Content:    Define a structure as:
 * 			a. Team Name
 * 		   	b. City Name 
 * 			c. No. of Wins
 *
 *	For Baseball Team, add 
 *		i.	No. of Hits
 *		ii. 	no. of runs
 *		iii. 	no. of errors
 *		iv. 	no. of extra timing games
 * 
 *	For Baseball Team, add 
 *		i.	 No. of Ties
 *		ii. 	no. of Goals
 *		iii. 	no. of Touch Downs
 *		iv. 	no. of Turnovers
 *
 *     Display Data for Baseball and Football seperately
 *     Also display data sorted by highest no. of wins
 * ============================================================*/
#include <stdio.h>
#include <string.h>

// Struct Declaration for Union "game" Starts
// Struct Declaration for Baseball
struct baseball{
	int hits;
	int runs;
	int errors;
	int extra_timing_games;
};

// Struct Declaration for Football
struct football {
	int ties;
	int goals;
	int touchdowns;
	int turn_overs;
};
// Struct Declaration for Union "game" Ends

// Main Structure Declaration Starts
struct team {
	char teamName[50];
	char city[50];
	int  wins;
	int  option;

	// Union Declaration Starts
	union game {
		struct baseball;
		struct football;
	};
	// Union Declaration Ends

};
// Main Structure Declaration Ends

// Function "inputData" for taking details of all teams 
struct team inputData()
{
	struct team t;
	union  game g;

	static int count = 1;

	printf("\n Team %d \n", count++);

	printf(" Enter Team Name: ");
	scanf("%s",t.teamName);

	printf(" Enter City Name: ");
	scanf("%s",t.city);

	printf(" Enter Wins: ");
	scanf("%d",&t.wins);

	// Selecting Game. Baseball or Football
	while(1) {
		printf("Which game this team plays?. Choose option \n");

		printf("\t1. Baseball  \n");
		printf("\t2. Football  \n");
		
		scanf("%d",&t.option);

		if(t.option == 1 || t.option == 2) {
			break;
		} else {
			printf("\nInvalid Input. Try Again\n");
		}

	}
	// Selecting Game Ends

	// Details required for Baseball
	if(t.option == 1) {
		printf(" Enter Hits: ");
		scanf("%d",&t.hits);

		printf(" Enter Runs: ");
		scanf("%d",&t.runs);

		printf(" Enter Errors: ");
		scanf("%d",&t.errors);

		printf(" Enter Extra Timing Games: ");
		scanf("%d",&t.extra_timing_games);		
	}
	// Details for Baseball Ends

	// Details required for Football
	 else {
		printf(" Enter Ties: ");
		scanf("%d",&t.ties);

		printf(" Enter goals: ");
		scanf("%d",&t.goals);

		printf(" Enter Touchdowns: ");
		scanf("%d",&t.touchdowns);

		printf(" Enter Turn Overs: ");
		scanf("%d",&t.turn_overs);
	}
	// Details for Football Ends

	return t;
}


// Function "displayBaseball" to display Baseball Teams only
int displayBaseball(struct team t)
{
	static int count = 1;

	// option 1 is for baseball, so checking "1" 
	if (t.option == 1) {
		printf("\n\n ===Team %d=== \n", count++);

		printf(" Team Name: %s\n", t.teamName);
		printf(" City:      %s\n", t.city);
		printf(" Wins:      %d\n", t.wins);

		printf("\n");
		
		printf(" Hits:        %d \n", t.hits);
		printf(" Runs:        %d \n", t.runs);
		printf(" Errors:      %d \n", t.errors);
		printf(" Extra Games: %d \n",t.extra_timing_games);

	}
	return 0;
}

// Function "displayFootball" to display Football Teams only
int displayFootball(struct team t)
{
	static int count = 1;

	// option 2 is for football, so checking "2" 
	if (t.option == 2) {
		printf("\n\n ===Team %d=== \n", count++);

		printf(" Team Name: %s\n", t.teamName);
		printf(" City:      %s\n", t.city);
		printf(" Wins:      %d\n", t.wins);

		printf("\n");

		printf(" Ties:        %d \n", t.ties);
		printf(" Goals:       %d \n", t.goals);
		printf(" Touchdowns:  %d \n", t.touchdowns);
		printf(" Turnovers:   %d \n", t.turn_overs);

	}
	return 0;
}

// Function "quicksortByWins" for sorting Teams by 
// highest no. of wins
void quicksortByWins(struct team c[], int l, int r)
{
	struct team temp;	
	int pivot;
	int i, cnt;

	if (l >= r) { return; }

	pivot =  c[r].wins;
	cnt = l;

	for (i = l; i <= r; i++) {
		if (c[i].wins >= pivot) {

			// Swapping Structure Starts
			temp = c[i];
			c[i] = c[cnt];
			c[cnt] = temp;
			// Swapping Structure Ends

			cnt++; 
		}
	}

	quicksortByWins(c, l, cnt - 2);
	quicksortByWins(c, cnt, r);
}


// Driver Program
int main()
{
	int n, i;
	struct team t[50];

	// Taking Number of teams
	while(1) {
		printf("Enter total number of teams: ");
		scanf("%d",&n);
		if(n > 0 && n < 51) {
			break;
		} else {
			printf("Invalid Input. Try Again\n");
		}
	}

	// Getting Data from user
	for (i = 0; i < n; ++i) {
		t[i] = inputData();
	}
	
	// Sorting Teams according to Highest Wins First
	quicksortByWins(t, 0, n - 1);

	// Displaying data for Baseball Team 
	printf("\n\n\n * * * Baseball Team * * *");
	for (i = 0; i < n; ++i) {
		displayBaseball(t[i]);
	}

	// Displaying data for Football Team 
	printf("\n\n\n * * * Football Team * * *");
	for (i = 0; i < n; ++i) {
		displayFootball(t[i]);
	}

	return 0;
}

/* ============================================================ 
 * Output :
	Enter total number of teams: 10

	 Team 1
	 Enter Team Name: Tigers
	 Enter City Name: Banglore
	 Enter Wins: 10
	Which game this team plays?. Choose option
	        1. Baseball
	        2. Football
	1
	 Enter Hits: 12
	 Enter Runs: 120
	 Enter Errors: 2
	 Enter Extra Timing Games: 2

	 Team 2
	 Enter Team Name: Lions
	 Enter City Name: Hydrabad
	 Enter Wins: 12
	Which game this team plays?. Choose option
	        1. Baseball
	        2. Football
	2
	 Enter Ties: 1
	 Enter goals: 22
	 Enter Touchdowns: 2
	 Enter Turn Overs: 8

	 Team 3
	 Enter Team Name: Warriors
	 Enter City Name: Ahmedabad
	 Enter Wins: 55
	Which game this team plays?. Choose option
	        1. Baseball
	        2. Football
	2
	 Enter Ties: 4
	 Enter goals: 102
	 Enter Touchdowns: 33
	 Enter Turn Overs: 42

	 Team 4
	 Enter Team Name: Winners
	 Enter City Name: Delhi
	 Enter Wins: 12
	Which game this team plays?. Choose option
	        1. Baseball
	        2. Football
	1
	 Enter Hits: 10
	 Enter Runs: 20
	 Enter Errors: 30
	 Enter Extra Timing Games: 40

	 Team 5
	 Enter Team Name: Savers
	 Enter City Name: Mumbai
	 Enter Wins: 33
	Which game this team plays?. Choose option
	        1. Baseball
	        2. Football
	1
	 Enter Hits: 23
	 Enter Runs: 12
	 Enter Errors: 2
	 Enter Extra Timing Games: 1

	 Team 6
	 Enter Team Name: Wellingtons
	 Enter City Name: Kolkatta
	 Enter Wins: 88
	Which game this team plays?. Choose option
	        1. Baseball
	        2. Football
	1
	 Enter Hits: 33
	 Enter Runs: 22
	 Enter Errors: 0
	 Enter Extra Timing Games: 7

	 Team 7
	 Enter Team Name: Heroes
	 Enter City Name: Pune
	 Enter Wins: 45
	Which game this team plays?. Choose option
	        1. Baseball
	        2. Football
	2
	 Enter Ties: 12
	 Enter goals: 44
	 Enter Touchdowns: 33
	 Enter Turn Overs: 22

	 Team 8
	 Enter Team Name: Unity
	 Enter City Name: Kochi
	 Enter Wins: 77
	Which game this team plays?. Choose option
	        1. Baseball
	        2. Football
	1
	 Enter Hits: 66
	 Enter Runs: 55
	 Enter Errors: 44
	 Enter Extra Timing Games: 33

	 Team 9
	 Enter Team Name: PenPencil
	 Enter City Name: Gandhidham
	 Enter Wins: 108
	Which game this team plays?. Choose option
	        1. Baseball
	        2. Football
	2
	 Enter Ties: 0
	 Enter goals: 1008
	 Enter Touchdowns: 0
	 Enter Turn Overs: 1

	 Team 10
	 Enter Team Name: Best
	 Enter City Name: Raipur
	 Enter Wins: 2
	Which game this team plays?. Choose option
	        1. Baseball
	        2. Football
	1
	 Enter Hits: 12
	 Enter Runs: 13
	 Enter Errors: 55
	 Enter Extra Timing Games: 33



	 * * * Baseball Team * * *

	 ===Team 1===
	 Team Name: Wellingtons
	 City:      Kolkatta
	 Wins:      88

	  Hits:        33   
	  Runs:        22   
	  Errors:      0   
	  Extra Games: 7

	 ===Team 2===
	 Team Name: Unity
	 City:      Kochi
	 Wins:      77

	  Hits:        66   
	  Runs:        55   
	  Errors:      44   
	  Extra Games: 33

	 ===Team 3===
	 Team Name: Savers
	 City:      Mumbai
	 Wins:      33

	  Hits:        23   
	  Runs:        12   
	  Errors:      2   
	  Extra Games: 1

	 ===Team 4===
	 Team Name: Winners
	 City:      Delhi
	 Wins:      12

	  Hits:        10   
	  Runs:        20   
	  Errors:      30   
	  Extra Games: 40

	 ===Team 5===
	 Team Name: Tigers
	 City:      Banglore
	 Wins:      10

	  Hits:        12   
	  Runs:        120   
	  Errors:      2   
	  Extra Games: 2

	 ===Team 6===
	 Team Name: Best
	 City:      Raipur
	 Wins:      2

	  Hits:        12   
	  Runs:        13   
	  Errors:      55   
	  Extra Games: 33


	 * * * Football Team * * *

	 ===Team 1===
	 Team Name: PenPencil
	 City:      Gandhidham
	 Wins:      108

	 Ties:        0   
	 Goals:       1008   
	 Touchdowns:  0   
	 Turnovers:   1

	 ===Team 2===
	 Team Name: Warriors
	 City:      Ahmedabad
	 Wins:      55

	 Ties:        4   
	 Goals:       102   
	 Touchdowns:  33   
	 Turnovers:   42

	 ===Team 3===
	 Team Name: Heroes
	 City:      Pune
	 Wins:      45

	 Ties:        12   
	 Goals:       44   
	 Touchdowns:  33   
	 Turnovers:   22

	 ===Team 4===
	 Team Name: Lions
	 City:      Hydrabad
	 Wins:      12

	 Ties:        1   
	 Goals:       22   
	 Touchdowns:  2   
	 Turnovers:   8

============================================================ */ 



 /* ============================================================ 

 * File: p2.c
	DEFINE :
	3.	 Write a program that stores and displays the records of the customer.
	 	 The following information for account of the customer is to be stored.
		 Account no, account type, name, old balance, new balance,
		 last payment, date of last payment.
		 
		 Take structure for storing the date 
		 in days, months and year. 
		 
		 Also display the current account status by comparing 
		 current payment and previous balance.
		 
		 Also calculate the current balance by subtracting
		 the current payment from the previous balance.

 * ============================================================*/


#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<string.h>

typedef struct {
	int dd,mm,yy;
} date;

typedef struct {
	int acc_no;
	float old_balance,new_balance,last_payment;
	char name[15];
	char status[10];
	date dateofpay;
} customer;

customer getData();
void setPrint(customer[],int); 
void menudriven(customer[],int);


customer getData()
{
	customer s;
	
	printf("\nEnter Account Number : ");
	scanf("%d",&s.acc_no);
	
	printf("Enter The Customer's Name : ");
	scanf("%s",s.name);
	
	printf("Enter The Old Balance : ");
	scanf("%f",&s.old_balance);
	
	printf("Enter The Last Payment : ");
	scanf("%f",&s.last_payment);
	
	s.new_balance = s.old_balance - s.last_payment;
	
	if(s.new_balance > 0)
		strcpy(s.status,"Pending");
	else
		strcpy(s.status,"Clear");

	printf("Enter Date of Last Payment [dd mm yy] : ");
	scanf("%d %d %d",&s.dateofpay.dd,&s.dateofpay.mm,&s.dateofpay.yy);
	printf(" ========== ");
	return s;
}

void setPrint(customer s[],int tc)
{
	int i;
	printf("\n\tList Of Customers\n ========== ");
	for( i = 0; i < tc; i++ )
	{
		printf("\n\n\tId: %d \n\tName: %s\n\tOld Bal: %.2f\n\tLast Payment: %.2f\n\tLast Pymnt Dt: %d/%d/%d\n\tNew Bal. = %.2f\n ========== ",s[i].acc_no,s[i].name,s[i].old_balance,s[i].last_payment,s[i].dateofpay.dd,s[i].dateofpay.mm,s[i].dateofpay.yy,s[i].new_balance);
	}
}

void menudriven(customer s[],int tc)
{
	int i,j,option,check;
	char name[15];
	
	printf("\n\n1: Disp Customer Details\n2: Find Customer By Name\n3: Disp Status\n4: Display Curr Bal.\n5: Exit\n\n");
	scanf("%d",&option);
	
	if(option == 1) {
		setPrint(s,tc);
		menudriven(s,tc);
	}

	else if(option == 2) {
		printf("Enter Customer Name : ");
		scanf("%s",name);
		for( i = 0; i < tc; i++ ) {
			check = strcmp(s[i].name,name);
			if( check == 0 )
				printf("\n\n\tCustomer Id = %d \n\tCustomer Name = %s\n\tOld Balance = %.2f\n\tLast Payment = %.2f\n\tLast Payment Date = %d/%d/%d\n\tNew Balance = %.2f \n\tStatus = %s \n\n ========== ",s[i].acc_no,s[i].name,s[i].old_balance,s[i].last_payment,s[i].dateofpay.dd,s[i].dateofpay.mm,s[i].dateofpay.yy,s[i].new_balance,s[i].status);
		}
		menudriven(s,tc);
	}

	else if(option == 3) {
		for( i = 0; i < tc; i++ )
			printf("\nCustomer Name = %s\n Status = %s\n ========== ",s[i].name,s[i].status);
		menudriven(s,tc);
	}

	else if(option == 4) {
		for( i = 0; i < tc; i++ ) 
			printf("\nCustomer Name = %s\n Current Balance = %.2f\n ========== ",s[i].name,s[i].new_balance);
		menudriven(s,tc);
	}

	else if(option == 5) {
		exit(0);	
	}

	else {
		printf("Invalid Option");
		menudriven(s,tc);
	}

	printf("\nNo such Customer\n");

	menudriven(s,tc);
}


int main()
{
	customer c[50];
	int i,total_cust;
	printf("Enter Number of Customers: ");
	scanf("%d",&total_cust);
	for( i = 0; i < total_cust; i++ )
	{
		c[i] = getData();
	}

	setPrint(c,total_cust);
	menudriven(c,total_cust);

	return 0;
}



/* ============================================================ 
 * Output :


	Enter Number of Customers: 3

	Enter Account Number : 10
	Enter The Customer's Name : Ajinkya
	Enter The Old Balance : 5000
	Enter The Last Payment : 5000
	Enter Date of Last Payment [dd mm yy] : 12 12 12
	 ==========
	Enter Account Number : 20
	Enter The Customer's Name : Pradip
	Enter The Old Balance : 10000
	Enter The Last Payment : 1200
	Enter Date of Last Payment [dd mm yy] : 5 8 13
	 ==========
	Enter Account Number : 30
	Enter The Customer's Name : Nirav
	Enter The Old Balance : 5600
	Enter The Last Payment : 5700
	Enter Date of Last Payment [dd mm yy] : 26 1 14
	 ==========
	        List Of Customers
	 ==========

	        Id: 10
	        Name: Ajinkya
	        Old Bal: 5000.00
	        Last Payment: 5000.00
	        Last Pymnt Dt: 12/12/12
	        New Bal. = 0.00
	 ==========

	        Id: 20
	        Name: Pradip
	        Old Bal: 10000.00
	        Last Payment: 1200.00
	        Last Pymnt Dt: 5/8/13
	        New Bal. = 8800.00
	 ==========

	        Id: 30
	        Name: Nirav
	        Old Bal: 5600.00
	        Last Payment: 5700.00
	        Last Pymnt Dt: 26/1/14
	        New Bal. = -100.00
	 ==========

	1: Disp Customer Details
	2: Find Customer By Name
	3: Disp Status
	4: Display Curr Bal.
	5: Exit

	1

	        List Of Customers
	 ==========

	        Id: 10
	        Name: Ajinkya
	        Old Bal: 5000.00
	        Last Payment: 5000.00
	        Last Pymnt Dt: 12/12/12
	        New Bal. = 0.00
	 ==========

	        Id: 20
	        Name: Pradip
	        Old Bal: 10000.00
	        Last Payment: 1200.00
	        Last Pymnt Dt: 5/8/13
	        New Bal. = 8800.00
	 ==========

	        Id: 30
	        Name: Nirav
	        Old Bal: 5600.00
	        Last Payment: 5700.00
	        Last Pymnt Dt: 26/1/14
	        New Bal. = -100.00
	 ==========

	1: Disp Customer Details
	2: Find Customer By Name
	3: Disp Status
	4: Display Curr Bal.
	5: Exit

	2
	Enter Customer Name : Nirav


	        Customer Id = 30
	        Customer Name = Nirav
	        Old Balance = 5600.00
	        Last Payment = 5700.00
	        Last Payment Date = 26/1/14
	        New Balance = -100.00
	        Status = Clear

	 ==========

	1: Disp Customer Details
	2: Find Customer By Name
	3: Disp Status
	4: Display Curr Bal.
	5: Exit

	3

	Customer Name = Ajinkya
	 Status = Clear
	 ==========
	Customer Name = Pradip
	 Status = Pending
	 ==========
	Customer Name = Nirav
	 Status = Clear
	 ==========

	1: Disp Customer Details
	2: Find Customer By Name
	3: Disp Status
	4: Display Curr Bal.
	5: Exit

	4

	Customer Name = Ajinkya
	 Current Balance = 0.00
	 ==========
	Customer Name = Pradip
	 Current Balance = 8800.00
	 ==========
	Customer Name = Nirav
	 Current Balance = -100.00
	 ==========

	1: Disp Customer Details
	2: Find Customer By Name
	3: Disp Status
	4: Display Curr Bal.
	5: Exit

	5


 ============================================================ */ 




 /* ============================================================ 
 * File: p4.c
 * Copyright: 09-Feb-2020 by Ajinkya Rathod(ajinzrathod)
 *
 * Content:    Define a structure as:
 * 			a. Author
 * 		   	b. Title 
 * 			c. Price
 * 			d. Publisher
 * 			e. Stock Position
 *
 * ============================================================*/


#include <stdio.h>
#include <string.h>

// Main Structure Declaration Starts
struct books {

	char author[50];
	char title[50];
	float price;
	char publisher[50];
	int stock;

};
// Main Structure Declaration Ends


// Function "inputData" for taking details of all Books
void inputData(struct books b[], int n)
{
	int i;

	for (i = 0; i < n; ++i) {

		printf("\n ========== Details of Books : %d ========== \n", i + 1);

		printf("\nEnter Name of Author\n");
		scanf("%s",b[i].author);

		printf("\nEnter Title of Book\n");
		scanf("%s",b[i].title);

		printf("\nEnter price of Book\n");
		scanf("%f",&b[i].price);

		printf("\nEnter name of Publisher\n");
		scanf("%s",b[i].publisher);

		printf("\nEnter Stock\n");
		scanf("%d",&b[i].stock);

	}
} 

void searchBook(struct books b[], int n)
{

	int i, j, copies, authorFound = 0, titleFound = 0;
	char tempAuthor[50], tempTitle[50];
	float amt;

	printf("\n ========== Search any Book ========== \n");

	printf("\nEnter Author Name : ");
	scanf("%s",tempAuthor);

	for(i = 0; i < n; ++i) {

		// Checking if author exists
		if(strcmp(b[i].author, tempAuthor) == 0) {

			authorFound = 1;

			printf("\nEnter Book Title : ");
			scanf("%s",tempTitle);

			// Checking if such Book Title exists
			if(strcmp(b[i].title, tempTitle) == 0) {

				titleFound = 1;

				printf("\nEnter Number of Copies You Want : ");
				scanf("%d",&copies);

				if(b[i].stock >= copies)  {

					amt = b[i].price * copies; // Bill amount

					printf("\n\tTotal Payable Amount For %d Copies Will Be :\n", copies);
					printf("\t[%.2f x %d] = $ %.2f\n", b[i].price, copies, amt);

				}

				// when available copies are less than demanded  
				else {
					printf("Out of Stock\n");
				}

			}
		}
	}

	// if no such author exists
	if(!authorFound) {
		printf("< %s > author not found in list\n", tempAuthor);
	}

	// if so such book title exists
	else if(!titleFound) {
		printf("< %s > has no such book as < %s >\n", tempAuthor, tempTitle);
	}
}


// Driver Program
int main()
{
	int n, i;
	struct books b[50];

	// Taking Number of Books
	while(1) {
		
		printf("Enter no of books: ");
		scanf("%d",&n);
		
		if(n > 0 && n < 51) {
			break;
		}

		else {
			printf("Invalid Input. Try Again\n");
		}

	}

	// Getting data for books 
	inputData(b, n);
	
	// Search any book you want
	searchBook(b, n);

	return 0;
}



 /* ============================================================
 * Output :

	Enter no of books: 4

	 ========== Details of Books : 1 ==========

	Enter Name of Author
	Ajinkya

	Enter Title of Book
	Python

	Enter price of Book
	2601

	Enter name of Publisher
	Ghanshyam

	Enter Stock
	812

	 ========== Details of Books : 2 ==========

	Enter Name of Author
	Lakshya

	Enter Title of Book
	Kierra

	Enter price of Book
	521.125

	Enter name of Publisher
	Advani

	Enter Stock
	125

	 ========== Details of Books : 3 ==========

	Enter Name of Author
	Balaguruswamy

	Enter Title of Book
	C

	Enter price of Book
	256.85

	Enter name of Publisher
	Hills

	Enter Stock
	71

	 ========== Details of Books : 4 ==========

	Enter Name of Author
	Devangi

	Enter Title of Book
	Riverfront

	Enter price of Book
	999.99

	Enter name of Publisher
	Pabari

	Enter Stock
	99

	 ========== Search any Book ==========

	Enter Author Name : Balaguruswamy

	Enter Book Title : C

	Enter Number of Copies You Want : 25

	        Total Payable Amount For 25 Copies Will Be :
	        [256.85 x 25] = $ 6421.25

  ============================================================*/



 /* ============================================================ 
 * File: p5.c
 * Copyright: 09-Feb-2020 by Ajinkya Rathod(ajinzrathod)
 *
 * Content:    Define a structure as:
 * 			a. Vehicle Name
 * 		   	b. Vehicle Price 
 * 			c. Vehicle Type [2 / 4]
 *
 *	For 2 Wheeler, add 
 *		i.	Mileage
 *		ii. 	Type [Geared / Gearless]
 * 
 *	For 4 Wheeler, add 
 *		i.	 Usage [Auto / Manual]
 *		ii. 	Engine No.
 *		iii. 	Type [Heavy / Light]
 *
 *  Display Data for 2 and 4 wheelers seperately
 * ============================================================*/


#include <stdio.h>
#include <string.h>
#include <stdbool.h>


// Struct Declaration for Union "count_wheels" Starts
// Struct Declaration for two_wheeler 
struct two_wheeler {

	float  mileage;
	bool   gear; // true for gear, false for gearless

};


// Struct Declaration for four_wheeler 
struct four_wheeler {

	bool usage; // true for auto, false for manual
	char engine_no[20];
	bool weight; // true for heavy, false for light

};
// Struct Declaration for Union "count_wheels" Ends


// Main Structure Declaration Starts
struct vehicle {

	char  vehicleName[50];
	float price;
	bool  wheels; // true for 2 wheeler, false for 4 wheeler


	// Union Declaration Starts
	union count_wheels {
		struct two_wheeler;
		struct four_wheeler;
	};
	// Union Declaration Ends


};
// Main Structure Declaration Ends


// Function "inputData" for taking details of all vehicles 
struct vehicle inputData()
{
	struct vehicle v;
	int    wheels, gearType, usageType, vehicleWeight;

	static int i = 0;

	printf("\nDetails for Vehicle No: %02d\n", ++i);

	printf(" Enter Vehicle Name: ");
	scanf("%s",v.vehicleName);
	
	printf(" Enter Vehicle Price: ");
	scanf("%f",&v.price);

	while(1) {
		printf(" Enter No. of Wheels: ");
		scanf("%d",&wheels);
		// printf("size = %d\n", sizeof(wheels)); // prints 4

		if(wheels == 2) {
			v.wheels = true;
			// printf("size = %d\n", sizeof(v.wheels)); // prints 1

			printf(" Enter Mileage: ");
			scanf("%f",&v.mileage);

			printf(" Enter Gear Type \n");
			printf("  Press 1 for Geared. 0 for Gearless: ");
			scanf("%d",&gearType); 

			if(gearType) {
				v.gear = true; // Vehicle is Geared
			}

			else {
				v.gear = false; // Vehicle is Gearless
			}
			break;

		} 
		else if(wheels == 4) {
			v.wheels = false;
			// printf("size = %d\n", sizeof(v.wheels)); // prints 1

			printf(" Enter Usage \n");
			printf("  Press 1 for Auto. 0 for Manual: ");
			scanf("%d",&usageType);

			if(usageType) {
				v.usage = true; // Usage is Auto
			}

			else {
				v.usage = false; // Usage is Manual
			}

			printf(" Enter Engine No: ");
			scanf("%s",v.engine_no);

			printf(" Enter Weight \n");
			printf("  Press 1 for Heavy. 0 for Light: ");
			scanf("%d",&vehicleWeight);

			if(vehicleWeight) {
				v.weight = true; // Weight is Heavy
			}

			else {
				v.weight = false; // Weight is Light
			}

			break;
		}

		else {
			printf("Invalid no of Wheels. Try Again \n");
		}
	}

	return v;
}


// Function "displayTwoWheelers" to display 2 Wheelers only
int displayTwoWheelers(struct vehicle v)
{

	// Prints only when v.wheels is true
	// Thus, prints only 2 wheelers
	if(v.wheels) {
		printf("\n");

		printf(" Name:   %s\n", v.vehicleName);
		printf(" Price:  %0.2f\n", v.price);
		
		printf("\n");
		printf(" Mileage:   %0.2f\n",v.mileage);

		if(v.gear) { //if v.gear is true
			printf(" Gear Type: Geared\n");
		}

		else { // if v.gear is false
			printf(" Gear Type: Gearless\n");
		}

		printf("\n====================\n");
	}

	return 0;
}


// Function "displayFourWheelers" to display 4 Wheelers only
int displayFourWheelers(struct vehicle v)
{

	// Prints only when v.wheels is false
	// Thus, prints only 4 wheelers
	if(!v.wheels) {
		printf("\n");

		printf(" Name:   %s\n", v.vehicleName);
		printf(" Price:  %0.2f\n", v.price);

		printf("\n");

		if(v.usage) { // if v.usage is true
			printf(" Usage:     Auto\n");
		}

		else { // if v.usage is false
			printf(" Usage:     Manual\n");
		}

		printf(" Engine No. %s\n", v.engine_no);
		
		if(v.weight) { // if v.weight is true
			printf(" Weight:    Heavy\n");
		}

		else { // if v.weight is false
			printf(" Weight:    Light\n");
		}

		printf("\n====================\n");
	}
	return 0;
}


// Driver Program
int main()
{
	int n, i;
	struct vehicle v[50];


	// Taking Number of teams
	while(1) {
		
		printf("Enter total number of Vehicles: ");
		scanf("%d",&n);

		if(n > 0 && n < 51) {
			break;
		}

		else {
			printf("Invalid Input. Try Again\n");
		}

	}


	// Getting Data from user
	for (i = 0; i < n; ++i) {
		v[i] = inputData();
	}


	// Displaying data for 2 Wheelers 
	printf("\n\n * * * * * Two Wheelers * * * *  *\n");
	for (i = 0; i < n; ++i) {
		displayTwoWheelers(v[i]);
	}


	// Displaying data for 4 Wheelers 
	printf("\n\n * * * * * Four Wheelers * * * * *\n");
	for (i = 0; i < n; ++i) {
		displayFourWheelers(v[i]);
	}

	return 0;
}

 /* ============================================================
 * Output :
	 Enter total number of Vehicles: 10

	Details for Vehicle No: 01
	 Enter Vehicle Name: BMW
	 Enter Vehicle Price: 96387.789
	 Enter No. of Wheels: 4
	 Enter Usage
	  Press 1 for Auto. 0 for Manual: 1
	 Enter Engine No: EAF9TY
	 Enter Weight
	  Press 1 for Heavy. 0 for Light: 1

	Details for Vehicle No: 02
	 Enter Vehicle Name: HarleyDavidson
	 Enter Vehicle Price: 15354.1565
	 Enter No. of Wheels: 2
	 Enter Mileage: 8.7
	 Enter Gear Type
	  Press 1 for Geared. 0 for Gearless: 1

	Details for Vehicle No: 03
	 Enter Vehicle Name: Mercedes
	 Enter Vehicle Price: 20012
	 Enter No. of Wheels: 4
	 Enter Usage
	  Press 1 for Auto. 0 for Manual: 0
	 Enter Engine No: ABC1DE
	 Enter Weight
	  Press 1 for Heavy. 0 for Light: 0

	Details for Vehicle No: 04
	 Enter Vehicle Name: Swift
	 Enter Vehicle Price: 1560.589
	 Enter No. of Wheels: 4
	 Enter Usage
	  Press 1 for Auto. 0 for Manual: 0
	 Enter Engine No: EGJ89Y
	 Enter Weight
	  Press 1 for Heavy. 0 for Light: 0

	Details for Vehicle No: 05
	 Enter Vehicle Name: Splendor
	 Enter Vehicle Price: 1545
	 Enter No. of Wheels: 2
	 Enter Mileage: 60
	 Enter Gear Type
	  Press 1 for Geared. 0 for Gearless: 1

	Details for Vehicle No: 06
	 Enter Vehicle Name: AstonMartin
	 Enter Vehicle Price: 99878.98754
	 Enter No. of Wheels: 4
	 Enter Usage
	  Press 1 for Auto. 0 for Manual: 1
	 Enter Engine No: WER997
	 Enter Weight
	  Press 1 for Heavy. 0 for Light: 0

	Details for Vehicle No: 07
	 Enter Vehicle Name: Pulsar
	 Enter Vehicle Price: 2568.258
	 Enter No. of Wheels: 2
	 Enter Mileage: 25.265
	 Enter Gear Type
	  Press 1 for Geared. 0 for Gearless: 1

	Details for Vehicle No: 08
	 Enter Vehicle Name: Ninja
	 Enter Vehicle Price: 78965.256
	 Enter No. of Wheels: 2
	 Enter Mileage: 4.25
	 Enter Gear Type
	  Press 1 for Geared. 0 for Gearless: 0

	Details for Vehicle No: 09
	 Enter Vehicle Name: Passion
	 Enter Vehicle Price: 782.256
	 Enter No. of Wheels: 2
	 Enter Mileage: 89
	 Enter Gear Type
	  Press 1 for Geared. 0 for Gearless: 1

	Details for Vehicle No: 10
	 Enter Vehicle Name: PorscheCarerraGT
	 Enter Vehicle Price: 963879.99979
	 Enter No. of Wheels: 4
	 Enter Usage
	  Press 1 for Auto. 0 for Manual: 1
	 Enter Engine No: AJ1NK
	 Enter Weight
	  Press 1 for Heavy. 0 for Light: 1


	 * * * * * Two Wheelers * * * * *

	 Name:   HarleyDavidson
	 Price:  15354.16

	 Mileage:   8.70
	 Gear Type: Geared

	====================

	 Name:   Splendor
	 Price:  1545.00

	 Mileage:   60.00
	 Gear Type: Geared

	====================

	 Name:   Pulsar
	 Price:  2568.26

	 Mileage:   25.26
	 Gear Type: Geared

	====================

	 Name:   Ninja
	 Price:  78965.26

	 Mileage:   4.25
	 Gear Type: Gearless

	====================

	 Name:   Passion
	 Price:  782.26

	 Mileage:   89.00
	 Gear Type: Geared

	====================


	 * * * * * Four Wheelers * * * * *

	 Name:   BMW
	 Price:  96387.79

	 Usage:     Auto
	 Engine No. EAF9TY
	 Weight:    Heavy

	====================

	 Name:   Mercedes
	 Price:  20012.00

	 Usage:     Manual
	 Engine No. ABC1DE
	 Weight:    Light

	====================

	 Name:   Swift
	 Price:  1560.59

	 Usage:     Manual
	 Engine No. EGJ89Y
	 Weight:    Light

	====================

	 Name:   AstonMartin
	 Price:  99878.98

	 Usage:     Auto
	 Engine No. WER997
	 Weight:    Light

	====================

	 Name:   PorscheCarerraGT
	 Price:  963880.00

	 Usage:     Auto
	 Engine No. AJ1NK
	 Weight:    Heavy

	====================

  ============================================================*/

