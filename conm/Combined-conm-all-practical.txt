

 /* ===========================================================
 * File:      1-bisection.cpp
 * Copyright: 10-Feb-2020 by Ajinkya Rathod(ajinzrathod)
 * 
 * Content:   Bisection Method
 * ========================================================== */

#include <iostream>
#include <math.h>
#include <iomanip>
#include <stdbool.h>
// #include <conio.h>
#include <cassert>

#define EPSILON 0.000005

using namespace std;

double f(double x)
{
	return (x * x * x) - (x) - 1;
}

bool sign(double value)
{
	if(value < 0) {
		return 0; // value is less than 0
	}
	else if(value > 0) {
		return 1; // value is greater than 0
	}
	else {
		cout << endl << " *** Neither +ve nor -ve. Returning value 0 *** " << endl;
		return 0;
	}
}

void displayData(double a, double b, double c) 
{
	static int count = 0;
	cout << setw(03) << ++count;
	cout << setw(10) <<   a  << " |" << setw(10) <<   b  << " |" ;
	cout << setw(10) << setprecision(6) << f(a) << " |" << setw(10) << f(b) << " |" ; 
	cout << setw(10) <<   c  << " |";
	cout << setw(10) << setprecision(6) << fixed << f(c) << endl;
}

void recursive(double a, double b)
{
	double c  = (a + b) / 2; 
	// double c  = ((a * f(b)) - (b * f(a))) / (f(b) - f(a));
	static int count = 0;

	displayData(a, b, c);

	
	// Accurate upto 6 decimal places 
	
	float nearest = fabs(roundf(f(c) * 1000000) / 1000000);
	if (EPSILON > nearest) { return; }
	
	// Accurate upto 6 decimal places Ends

	
	if((f(c) * f(b)) < 0) { // if negative
		recursive(c, b);
	}
	else { // if positive
		recursive(a, c);
	}
}

int main()
{
	double a = 0.00, b = 1.00;
	bool sign_a, sign_b;
	
	while(1) {

		if(sign(f(a)) == sign(f(b))) {
			a += 1;
			b += 1;
		}
		else { break; }
	}
	cout << setw(04) << "No.";
	cout << setw(10) << "a"    << " |"  << setw(10) << "b"     << " |" ; 
	cout << setw(18) << "f(a)" << " |"  << setw(15) << "f(b)"  << " |"; 
	cout << setw(20) << "c"    << " |"  << setw(20) << "f(c)"  ;

	cout << endl << endl;
	
	recursive(a, b);

	return 0;
}

 /* ===========================================================
 Output :

 No.        a |         b |      f(a) |      f(b) |         c |      f(c)

  1         1 |         2 |        -1 |         5 |       1.5 |  0.875000
  2  1.000000 |  1.500000 | -1.000000 |  0.875000 |  1.250000 | -0.296875
  3  1.250000 |  1.500000 | -0.296875 |  0.875000 |  1.375000 |  0.224609
  4  1.250000 |  1.375000 | -0.296875 |  0.224609 |  1.312500 | -0.051514
  5  1.312500 |  1.375000 | -0.051514 |  0.224609 |  1.343750 |  0.082611
  6  1.312500 |  1.343750 | -0.051514 |  0.082611 |  1.328125 |  0.014576
  7  1.312500 |  1.328125 | -0.051514 |  0.014576 |  1.320312 | -0.018711
  8  1.320312 |  1.328125 | -0.018711 |  0.014576 |  1.324219 | -0.002128
  9  1.324219 |  1.328125 | -0.002128 |  0.014576 |  1.326172 |  0.006209
 10  1.324219 |  1.326172 | -0.002128 |  0.006209 |  1.325195 |  0.002037
 11  1.324219 |  1.325195 | -0.002128 |  0.002037 |  1.324707 | -0.000047
 12  1.324707 |  1.325195 | -0.000047 |  0.002037 |  1.324951 |  0.000995
 13  1.324707 |  1.324951 | -0.000047 |  0.000995 |  1.324829 |  0.000474
 14  1.324707 |  1.324829 | -0.000047 |  0.000474 |  1.324768 |  0.000214
 15  1.324707 |  1.324768 | -0.000047 |  0.000214 |  1.324738 |  0.000084
 16  1.324707 |  1.324738 | -0.000047 |  0.000084 |  1.324722 |  0.000018
 17  1.324707 |  1.324722 | -0.000047 |  0.000018 |  1.324715 | -0.000014
 18  1.324715 |  1.324722 | -0.000014 |  0.000018 |  1.324718 |  0.000002
 * ========================================================== */




 /* ===========================================================
 * File:      2-bisection.cpp
 * Copyright: 10-Feb-2020 by Ajinkya Rathod(ajinzrathod)
 * 
 * Content:   Bisection Method
 * ========================================================== */

#include <iostream>
#include <math.h>
#include <iomanip>
#include <stdbool.h>
// #include <conio.h>
#include <cassert>

#define EPSILON 0.000005

using namespace std;

double f(double x)
{
	return x * exp(x) - 1;
}

bool sign(double value)
{
	if(value < 0) {
		return 0; // value is less than 0
	}
	else if(value > 0) {
		return 1; // value is greater than 0
	}
	else {
		cout << endl << " *** Neither +ve nor -ve. Returning value 0 *** " << endl;
		return 0;
	}
}

void displayData(double a, double b, double c) 
{
	static int count = 0;
	cout << setw(03) << ++count;
	cout << setw(10) <<   a  << " |" << setw(10) <<   b  << " |" ;
	cout << setw(10) << setprecision(6) << f(a) << " |" << setw(10) << f(b) << " |" ; 
	cout << setw(10) <<   c  << " |";
	cout << setw(10) << setprecision(6) << fixed << f(c) << endl;
}

void recursive(double a, double b)
{
	double c  = (a + b) / 2; 
	// double c  = ((a * f(b)) - (b * f(a))) / (f(b) - f(a));
	static int count = 0;

	displayData(a, b, c);

	
	// Accurate upto 6 decimal places 
	
	float nearest = fabs(roundf(f(c) * 1000000) / 1000000);
	if (EPSILON > nearest) { return; }
	
	// Accurate upto 6 decimal places Ends

	
	if((f(c) * f(b)) < 0) { // if negative
		recursive(c, b);
	}
	else { // if positive
		recursive(a, c);
	}
}

int main()
{
	double a = 0.00, b = 1.00;
	bool sign_a, sign_b;
	
	while(1) {

		if(sign(f(a)) == sign(f(b))) {
			a += 1;
			b += 1;
		}
		else { break; }
	}
	cout << setw(04) << "No.";
	cout << setw(10) << "a"    << " |"  << setw(10) << "b"     << " |" ; 
	cout << setw(18) << "f(a)" << " |"  << setw(15) << "f(b)"  << " |"; 
	cout << setw(20) << "c"    << " |"  << setw(20) << "f(c)"  ;

	cout << endl << endl;
	
	recursive(a, b);

	return 0;
}

 /* ===========================================================
 Output :

 No.        a |         b |      f(a) |      f(b) |         c |      f(c)

  1         0 |         1 |        -1 |   1.71828 |       0.5 | -0.175639
  2  0.500000 |  1.000000 | -0.175639 |  1.718282 |  0.750000 |  0.587750
  3  0.500000 |  0.750000 | -0.175639 |  0.587750 |  0.625000 |  0.167654
  4  0.500000 |  0.625000 | -0.175639 |  0.167654 |  0.562500 | -0.012782
  5  0.562500 |  0.625000 | -0.012782 |  0.167654 |  0.593750 |  0.075142
  6  0.562500 |  0.593750 | -0.012782 |  0.075142 |  0.578125 |  0.030619
  7  0.562500 |  0.578125 | -0.012782 |  0.030619 |  0.570312 |  0.008780
  8  0.562500 |  0.570312 | -0.012782 |  0.008780 |  0.566406 | -0.002035
  9  0.566406 |  0.570312 | -0.002035 |  0.008780 |  0.568359 |  0.003364
 10  0.566406 |  0.568359 | -0.002035 |  0.003364 |  0.567383 |  0.000662
 11  0.566406 |  0.567383 | -0.002035 |  0.000662 |  0.566895 | -0.000687
 12  0.566895 |  0.567383 | -0.000687 |  0.000662 |  0.567139 | -0.000013
 13  0.567139 |  0.567383 | -0.000013 |  0.000662 |  0.567261 |  0.000325
 14  0.567139 |  0.567261 | -0.000013 |  0.000325 |  0.567200 |  0.000156
 15  0.567139 |  0.567200 | -0.000013 |  0.000156 |  0.567169 |  0.000072
 16  0.567139 |  0.567169 | -0.000013 |  0.000072 |  0.567154 |  0.000029
 17  0.567139 |  0.567154 | -0.000013 |  0.000029 |  0.567146 |  0.000008
 18  0.567139 |  0.567146 | -0.000013 |  0.000008 |  0.567142 | -0.000002

 * ========================================================== */




 /* ===========================================================
 * File:      3-false-position.cpp
 * Copyright: 10-Feb-2020 by Ajinkya Rathod(ajinzrathod)
 * 
 * Content:   False Position Method
 * ========================================================== */

#include <iostream>
#include <math.h>
#include <iomanip>
#include <stdbool.h>
#include <conio.h>

#define EPSILON 0.000000005

using namespace std;

double f(double x)
{
	return (x * (log10(x)) - 1.2);
}

bool sign(double value)
{
	if(value < 0) {
		return 0; // value is less than 0
	}
	else if(value > 0) {
		return 1; // value is greater than 0
	}

	else {
		cout << "Neither +ve nor -ve. Returning value 0";
		getch();
		exit(1);
	}
}

void displayData(double a, double b, double c) 
{
	cout << setw(10) <<   a  << " |" << setw(10) <<   b  << " |" ;
	cout << setw(10) << f(a) << " |" << setw(15) << f(b) << " |" ; 
	cout << setw(10) <<   c  << " |" << setw(15) << f(c) << endl ;
}

void recursive(double a, double b)
{
	double c  = ((a * f(b)) - (b * f(a))) / (f(b) - f(a));  
	static int count = 0;

	displayData(a, b, c);

	// if(f(c) > 0.000005) { return; }
	if(count++ > 15) { return; } 

	if(sign(f(c))) { // if sign_c is positive
		recursive(c, b);
	}
	else { // if sign_c is negative
		recursive(a, c);
	}

}

int main()
{
	double a = 2.00, b = 3.00;
	bool sign_a, sign_b;

	while(1) {

		if(sign(f(a)) == sign(f(b))) {
			a += 1;
			b += 1;
		}
		else { break; }
	}

	cout << setw(10) << "a"    << " |"  << setw(10) << "b"     << " |" ; 
	cout << setw(10) << "f(a)" << " |"  << setw(10) << "f(b)"  << " |"; 
	cout << setw(10) << "c"    << " |"  << setw(10) << "f(c)"  ;

	cout << endl << endl;
	
	recursive(a, b);

	return 0;
}


 /* ===========================================================
 Output :
         a |         b |      f(a) |           f(b) |         c |           f(c)
         
         2 |         3 |  -0.59794 |       0.231364 |   2.72101 |     -0.0170911
         2 |   2.72101 |  -0.59794 |     -0.0170911 |   2.74223 |     0.00138143
   2.74223 |   2.72101 |0.00138143 |     -0.0170911 |   2.74064 |  -2.47288e-006
   2.74223 |   2.74064 |0.00138143 |  -2.47288e-006 |   2.74065 |  -3.55667e-010
   2.74223 |   2.74065 |0.00138143 |  -3.55667e-010 |   2.74065 |  -5.12287e-014
   2.74223 |   2.74065 |0.00138143 |  -5.12287e-014 |   2.74065 |  -1.55041e-016
   2.74223 |   2.74065 |0.00138143 |  -1.55041e-016 |   2.74065 |  -1.55041e-016
   2.74223 |   2.74065 |0.00138143 |  -1.55041e-016 |   2.74065 |  -1.55041e-016
   2.74223 |   2.74065 |0.00138143 |  -1.55041e-016 |   2.74065 |  -1.55041e-016
   2.74223 |   2.74065 |0.00138143 |  -1.55041e-016 |   2.74065 |  -1.55041e-016
   2.74223 |   2.74065 |0.00138143 |  -1.55041e-016 |   2.74065 |  -1.55041e-016
   2.74223 |   2.74065 |0.00138143 |  -1.55041e-016 |   2.74065 |  -1.55041e-016
   2.74223 |   2.74065 |0.00138143 |  -1.55041e-016 |   2.74065 |  -1.55041e-016
   2.74223 |   2.74065 |0.00138143 |  -1.55041e-016 |   2.74065 |  -1.55041e-016
   2.74223 |   2.74065 |0.00138143 |  -1.55041e-016 |   2.74065 |  -1.55041e-016
   2.74223 |   2.74065 |0.00138143 |  -1.55041e-016 |   2.74065 |  -1.55041e-016
   2.74223 |   2.74065 |0.00138143 |  -1.55041e-016 |   2.74065 |  -1.55041e-016 
 * ========================================================== */




 /* ===========================================================
 * Content:   Secant Method
 * ========================================================== */


#include<iostream>
#include<math.h>
#include <iomanip>

#define EPSILON 0.000000005

using namespace std;

double f(double x)
{
	return (3 * x) - cos(x) - 1;
}

bool sign(double value)
{
	if(f(value) < 0) {
		return 0; // value is less than 0
	}
	else if(f(value) > 0) {
		return 1; // value is greater than 0
	}
}

void displayData(double a, double b, double c) 
{
	cout << setw(10) <<   a  << " |" << setw(10) <<   b  << " |" ;
	cout << setw(18) << f(a) << " |" << setw(15) << f(b) << " |" ; 
	cout << setw(20) <<   c  << " |" << setw(20) << f(c) << endl ;
}

void recursive(double a, double b)
{
	double c;
	bool sign_c;
	static int count = 1;

	a = b;
	b = c; 

	displayData(a, b, c);

	// if(f(c) > 0.000005) { return; }
	if(count++ > 15) { return; } 

// these below lines might not come, coz secant method does not care if sign is +ve or -ve
	// sign_c = sign(c);

	// if(sign_c) {
	// 	recursive(c, b);
	// }
	// else {
	// 	recursive(a, c);
	// }
}

int main()
{
	double a = 2.00;
	double b = 3.00;
	
	bool sign_a = true;
	bool sign_b = true;

	sign_a = sign(a);

	while(1) {
		sign_b = sign(b);

		if(sign_a == sign_b) {
			a += 1;
			b += 1;
		}
		else {
			break;
		}
	}

	cout << setw(10) << "a"    << " |"  << setw(10) << "b"     << " |" ; 
	cout << setw(18) << "f(a)" << " |"  << setw(15) << "f(b)"  << " |"; 
	cout << setw(20) << "c"    << " |"  << setw(20) << "f(c)"  ;

	cout << endl << endl;
	
	recursive(a, b);

	return 0;
}

 /* ===========================================================
 Output :

       a             b         f(a)         f(b)            c          f(c)

2.000000 |    3.000000 |  -0.597940 |   0.231364 |   2.721014 |   -0.017091 |
2.721014 |    3.000000 |  -0.017091 |   0.231364 |   2.740206 |   -0.000384 |
2.740206 |    3.000000 |  -0.000384 |   0.231364 |   2.740636 |   -0.000009 |
2.740636 |    3.000000 |  -0.000009 |   0.231364 |   2.740646 |   -0.000000 |

 * ========================================================== */



 /* ===========================================================
 * Content:   Newton Rahpson Method
 * ========================================================== */



#include<stdio.h>
#include<math.h>
#define EPSILON 0.0000005


double function5(double x,double y)
{
	return (x * x) - y;
}


double dfunction5(double x)
{
	return 2 * x;
}


void newton_rafson(double x)
{
	double c, y;
	int i = 1, limit, flag = 0;
	
	printf("Enter number to find its square root: ");
	scanf("%lf",&y);

	printf("Enter x: ");
	scanf("%lf",&x);

	printf("Enter Max iter: ");
	scanf("%d",&limit);

	c = x - (function5(x, y) / dfunction5(x));

	printf("\n\nno\txn\t\tf(xn)\t\tf'(xn)\t\txn+1\t\tf(xn+1)");

	printf("\n\n%d |\t%lf |\t%lf |\t%lf |\t%lf |\t%lf",i,x,function5(x,y),dfunction5(x),c,function5(c,y));

	while(fabs(function5(c,y)) >= EPSILON && i<limit) {
		i++;
		x = c;
		if(fabs(dfunction5(x)) < 0.00001) {
			printf("\nDivide by zero Error encountered!!!");
			flag = 1;
			break;
		}

		c=x-(function5(x,y)/dfunction5(x));
		
		printf("\n%d |\t%lf |\t%lf |\t%lf |\t%lf |\t%lf",i,x,function5(x,y),dfunction5(x),c,function5(c,y));
	}
	if(flag != 1)
		printf("\n\nRoot =%lf",c);
}


int main()
{
	double x=0;

	newton_rafson(x);
	
	return 0;
}



 /* ===========================================================
 Output :

	Enter number to find its square root: 2
	Enter x: 5
	Enter Max iter: 7


	no      xn              f(xn)           f'(xn)          xn+1            f(xn+1)

	1 |     5.000000 |      23.000000 |     10.000000 |     2.700000 |      5.290000
	2 |     2.700000 |      5.290000 |      5.400000 |      1.720370 |      0.959674
	3 |     1.720370 |      0.959674 |      3.440741 |      1.441455 |      0.077794
	4 |     1.441455 |      0.077794 |      2.882911 |      1.414471 |      0.000728
	5 |     1.414471 |      0.000728 |      2.828942 |      1.414214 |      0.000000

	Root =1.414214


 * ========================================================== */






 /* ===========================================================
 * Content:   Fixed Point Method
 * ========================================================== */



#include<stdio.h>
#include<conio.h>
#include<math.h>
#define EPSILON 0.0000005

double g(double x)
{
	return (3  * x) - cos(x)- 1;
}

void fixed_point(double x)
{

	int i = 1, limit;
	double c;

	printf("Enter value of x: ");
	scanf("%lf",&x);
	
	printf("Enter Maximum iterations: ");
	scanf("%d",&limit);
	
	printf("no \t \tx \t \t\t g(x)");
	
	while(fabs(x-g(x)) > EPSILON && i <= limit) {
		printf("\n%d |\t\t%lf |\t\t%lf",i,x,g(x));
		x = g(x);
		i += 1;
	}
}


int main()
{
	double x = 0;

	fixed_point(x);
	
	return 0;
}



 /* ===========================================================
 Output :


	Enter value of x: 0
	Enter Maximum iterations: 15
	no              x                        g(x)
	1 |             0.000000 |              0.666667
	2 |             0.666667 |              0.595296
	3 |             0.595296 |              0.609328
	4 |             0.609328 |              0.606678
	5 |             0.606678 |              0.607182
	6 |             0.607182 |              0.607086
	7 |             0.607086 |              0.607105
	8 |             0.607105 |              0.607101
	9 |             0.607101 |              0.607102


 * ========================================================== */



