Roll No    :6
Name       :Chotaliya Shivangi Dilipbhai
Class	   :MCA-2
Subject    :Object Oriented Concepts & Programming 
======================================================================================
Definition :15) Write a program that stores and displays the records of the customer 
	    from a file the following information for account of the customer is to be
            stored. Account no, account type, name, old balance, new balance,  
            last payment,   date of last payment. Also display the current account 
            status by comparing current payment and previous balance. Also calculate
            the current balance by subtracting the current payment from the previous 
            balance. 
======================================================================================

#include<iostream>
#include<ctime>
#include<fstream>
#include<string>
#include<sstream>
using namespace std;

class account{
	int acc_num,new_balance,last_payment,num;
	string acc_type,name,transaction_date,transaction_type;;
public:
	account(){
		acc_num=0;
		new_balance=0;
		last_payment=0;
	}
	void getdata(){
		cout<<"Enter account number: ";
		cin>>acc_num;
		cout<<"Enter name of customer: ";
		cin>>name;
		cout<<"Enter account type: ";
		cin>>acc_type;
		cout<<"Enter the opening balance: ";
		cin>>new_balance;
	}
	void show(){
			cout<<"Account Number: "<<acc_num<<endl;
			cout<<"Name: "<<name<<endl;
			cout<<"Balance: "<<new_balance<<endl<<endl;
	}
	void show_transaction(int x){
		if(x==num){
			cout<<"Account Numebr: "<<num<<endl;
			cout<<"Transaction Date: "<<transaction_date<<endl;
			cout<<"Transaction type: "<<transaction_type<<endl;
			cout<<"Amount: "<<last_payment<<endl;
			cout<<"Balance: "<<new_balance<<endl;
		}
	}
	int transaction(int x,string v_date){
		int temp,choice;
		cout<<"1. Deposite\n2. Withdraw\n";
		cin>>choice;
		switch(choice){
			case 1:
				cout<<"Enter the amount you want to deposite: ";
				num=x;
				transaction_date=v_date;
				cin>>temp;
				new_balance=new_balance+temp;
				last_payment=temp;
				transaction_type="Credit";
				cout<<"Transaction completed successfully\n";
				break;
			case 2:
				cout<<"Enter the amount you want to withdraw: ";
				cin>>temp;
				if(temp<=new_balance){
					num=x;
					transaction_date=v_date;
					new_balance=new_balance-temp;
					last_payment=temp;
					transaction_type="Debit";
					cout<<"Transaction completed successfully\n";
				}
				else
					cout<<"Transaction failed due to Insufficent balance in account\n";
				break;
			default:
				cout<<"Please enter correct choice\n";
		}
		return new_balance;
	}
	void upd_balance(int x){

		new_balance=x;
	}
};

void main(){

	//date code;
	string v_date,v_month,v_year;
	stringstream sd,sm,sy;
	int a;
	time_t t=time(NULL);
	tm* timeptr=localtime(&t);
	a=(timeptr->tm_mday);
	sd<<a;
	sd>>v_date;
	a=((timeptr->tm_mon)+1);
	sm<<a;
	sm>>v_month;
	a=((timeptr->tm_year)+1900);
	sy<<a;
	sy>>v_year;
	v_date=v_date+"/"+v_month+"/"+v_year;
	//date code complete.

	account obj;
	fstream file, enterfile;
	int count=0,choice,flag=0,balance=0,position,endposition,n;
	char var_continue='y';
	do{
		cout<<"\n1. Add Customer\n2. Customer Details\n3. Perform Transaction\n4. Transaction History\n5. Exit\n";
		cin>>choice;
		switch(choice){
			case 1:
				file.open("Account.txt",ios::out | ios::binary | ios::app);
				if(!file)
					cout<<"File does not exits\n";
				else{
					cout<<"Input data:\n";
					do{
						obj.getdata();
						file.write((char*) &obj,sizeof(obj));
						if(file.fail()) 
							cout<<"File write failed";
						cout<<"Do you want continue? (y/n): ";
						cin>>var_continue;
					}while(var_continue!='n');
				}
				file.close();
				break;
			case 2:
				file.open("Account.txt",ios::out | ios::in | ios::binary);
				file.seekg(0,ios::end);
				endposition=file.tellg();
				n=endposition/sizeof(account);
				cout<<"Enter account number: ";
				cin>>n;
				position=(n-1)*sizeof(account);
				file.seekg(position);
				file.read((char*) &obj,sizeof(obj));
				if(file.fail())
					cout<<"Account number does not exists\n";
				else
				obj.show();
				file.seekg(0);
				file.close();
				break;
			case 3:
				file.open("Account.txt",ios::out | ios::in | ios::binary);
				file.seekg(0,ios::end);
				endposition=file.tellg();
				n=endposition/sizeof(account);
				cout<<"Enter account number: ";
				cin>>n;
				position=(n-1)*sizeof(account);
				file.seekg(position);
				file.read((char*) &obj,sizeof(obj));
				if(file.fail())
					cout<<"Account number does not exists\n";
				else{
					enterfile.open("Transaction.txt", ios::out | ios::binary | ios::app);
					balance=obj.transaction(n,v_date);
					enterfile.write((char*) &obj,sizeof(obj));
					enterfile.close();
				}
				file.seekp(0);
				file.seekp(position);
				obj.upd_balance(balance);
				file.write((char*) &obj,sizeof(obj));
				file.seekg(0);
				file.close();
				break;
			case 4:
				cout<<"Enter account number: ";
				cin>>n;
				file.open("Transaction.txt",ios::in | ios::out | ios::binary);
				file.seekg(ios::beg);
				while(file.read((char*) &obj,sizeof(obj))){
					obj.show_transaction(n);
				}
				file.close();
				break;
			case 5:
				exit(0);
			default:
				cout<<"Enter correct choice\n";
		}
	}while(1);
}

============
OUTPUT
============


1. Add Customer
2. Customer Details
3. Perform Transaction
4. Transaction History
5. Exit
1
Input data:
Enter account number: 1
Enter name of customer: shivangi
Enter account type: current
Enter the opening balance: 450
Do you want continue? (y/n): y
Enter account number: 2
Enter name of customer: preet
Enter account type: saving
Enter the opening balance: 780
Do you want continue? (y/n): n

1. Add Customer
2. Customer Details
3. Perform Transaction
4. Transaction History
5. Exit
2
Enter account number: 1
Account Number: 101
Name: shivangi
Balance: 5000


1. Add Customer
2. Customer Details
3. Perform Transaction
4. Transaction History
5. Exit
2
Enter account number: 2
Account Number: 102
Name: preet
Balance: 8000


1. Add Customer
2. Customer Details
3. Perform Transaction
4. Transaction History
5. Exit
3
Enter account number: 1
1. Deposite
2. Withdraw
1
Enter the amount you want to deposite: 500
Transaction completed successfully

1. Add Customer
2. Customer Details
3. Perform Transaction
4. Transaction History
5. Exit
2
Enter account number: 1
Account Number: 101
Name: shivangi
Balance: 5500


1. Add Customer
2. Customer Details
3. Perform Transaction
4. Transaction History
5. Exit
4
Enter account number: 1
Account Numebr: 1
Transaction Date: 5/6/2020
Transaction type: Credit
Amount: 500
Balance: 5500

1. Add Customer
2. Customer Details
3. Perform Transaction
4. Transaction History
5. Exit
5
