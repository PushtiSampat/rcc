Roll No    :6
Name       :Chotaliya Shivangi Dilipbhai
Class	   :MCA-2
Subject    :Object Oriented Concepts & Programming 
======================================================================================
Definition :8) An educational institution wishes to maintain a database of its employees.
	 The database is divided into a number of classes whose hierarchical 
	 relationships are shown in fig-1. The figure also shows the minimum information
	 required for each class. Specify all the classes and define function to create 
         the database and retrieve individual information as and when required. Write
         parameterized constructor for each class in the hierarchy.
======================================================================================

#include<iostream>
#include<conio.h>
#include<string>
using namespace std;

class Staff
{
public:
	int code;
	string name,designation;
	
public:
	Staff()
	{
	}
	Staff::Staff(int v_code,string v_name,string v_designation)
	{
		code=v_code;
		name=v_name;
	}
	
	virtual void printdata(){}
	friend class StaffCollection;
};

class Teacher :virtual public Staff
{
public:	
	string sub,pub;

public:
	Teacher(int v_code,string v_name,string v_sub,string v_pub):Staff(v_code,v_name,"Teacher")
	{	
		sub=v_sub;
		pub=v_pub;
	}
	
	void printdata()
	{	
		cout<<"Designation is:"<<this->designation<<endl;
		cout<<"------------------------------"<<endl;
		cout<<"code is:"<<code<<endl;
		cout<<"name is:"<<name<<endl;
		cout<<"Designation is:"<<this->designation<<endl;
		cout<<"Subject is:"<<sub<<endl;
		cout<<"Publication is:"<<pub<<endl;
	}

};

class Officer : public Staff
{
public:
	char grade;

public:	
	Officer(int v_code,string v_name,int v_grade):Staff(v_code,v_name,"Officer")
	{
		grade=v_grade;
	}
	
	void printdata()
	{
		cout<<"Designation is:"<<this->designation<<endl;
		cout<<"------------------------------"<<endl;
		cout<<"code is:"<<code<<endl;
		cout<<"name is:"<<name<<endl;
		cout<<"Designation is:"<<this->designation<<endl;
		cout<<"grade is:"<<grade<<endl;
	}
};

class Typist :public Staff
{
public:
	int speed;
	string typist_type;
public:

	Typist(int v_code,string v_name,int v_speed):Staff(v_code,v_name,"Typist")
	{
		speed=v_speed;
	}
	virtual	void printdata()=0;
	
};

class Casual : public Typist
{
public:
	float daily_wages;

public:	
	
	Casual(int v_code,string v_name,int v_speed,float v_wages):Typist(v_code,v_name,v_speed)
	{
		typist_type="Casual";
		daily_wages=v_wages;
	}
	void printdata()
	{
		cout<<"Designation is:"<<designation<<endl;
		cout<<"------------------------------"<<endl;
		cout<<"code is:"<<code<<endl;
		cout<<"name is:"<<name<<endl;
		cout<<"Designation is:"<<this->designation<<endl;
		cout<<"Speed is:"<<speed<<endl;
		cout<<"Type is:"<<typist_type<<endl;
		cout<<"Daily wages is:"<<daily_wages<<endl;
	}
};


class Reguler : public Typist
{

public:	
	Reguler(int v_code,string v_name,int v_speed):Typist(v_code,v_name,v_speed)
	{
		typist_type="reguler";
		
	}
	void printdata()
	{
		cout<<"Designation is:"<<this->designation<<endl;
		cout<<"------------------------------"<<endl;
		cout<<"code is:"<<code<<endl;
		cout<<"name is:"<<name<<endl;
		cout<<"Designation is:"<<this->designation<<endl;
		cout<<"Speed is:"<<speed<<endl;
		cout<<"Type is:"<<typist_type<<endl;
	}
};

class StaffCollection
{
	Staff *list[20];
	int count,size;
public:
	
	StaffCollection::StaffCollection(int n){
	*list = new Staff[n];
	this->count=0;
	this->size=n;

	}
	int getCount() { return this->count; }

	void addStaff(Staff *s) {
		if (this->count >= this->size) {
			cout << "Staff is full!" << endl;
			return;
		}
		list[this->count] = s;
		this->count++;
	}

	void displaysaff()
	{
		for(int i=0;i<this->count;i++)
		{
			list[i]->printdata();
		}
	}

	Staff *readstaff()
	{
		Staff *member=NULL;
		string name,subject,publication;
		int speed,op,code;
		float daily_wages;
		char grade;
		cout<<"\n--------------------";
		cout<<"\n 1.Teacher \n 2.Officer \n 3.Reguler Typist \n 4.Casual Typist";
		cout<<"\n--------------------";
		cout<<"\n enter your choice:";
		cin>>op;

		cout<<"\n Enter staff code and name:";
		cin>>code>>name;
		switch(op)
		{
		case 1:
				cout<<"\n Subject is:";
				cin>>subject;
				cout<<"\n Publication is:";
				cin>>publication;
				member = new Teacher(code,name,subject,publication);
				break;
		case 2:
				cout<<"\n Enter grade:";
				cin>>grade;
				member = new Officer(code,name,grade);
				break;
		case 3:
				cout<<"\n Enter Speed:";
				cin>>speed;
				member = new Reguler(code,name,speed);
				break;

		case 4:cout<<"\n Enter Speed:";
				cin>>speed;
				cout<<"\n Enter daily wages:";
				cin>>daily_wages;
				member = new Casual(code,name,speed,daily_wages);
				break;
		}
		return member;
	}

};
int main()
{
	int n, op = 1;

	cout << "\n Enter total number of staff members: ";
	cin >> n;

	StaffCollection coll(n);
	Staff *member;
	string code;

	while (op) {
		cout << "\n1.Add Staff Member\n2.Display Staff\n3.Exit \n";
		cout<<"\n Enter choice:";
		cin >> op;
		switch (op) {
		case 1: member = coll.readstaff();
				coll.addStaff(member);
				break;
		
		case 2: coll.displaysaff(); break;
		case 3:exit(0);
		default: cout << "Wrong choice!" << endl;
		}
	}
	_getch();
	return 0;
}

============
OUTPUT
============


 Enter total number of staff members: 2

1.Add Staff Member
2.Display Staff

 Enter choice:1

--------------------
 1.Teacher
 2.Officer
 3.Reguler Typist
 4.Casual Typist
--------------------
 enter your choice:2

 Enter staff code and name:101 shivangi

 Enter grade:45

1.Add Staff Member
2.Display Staff

 Enter choice:Wrong choice!

1.Add Staff Member
2.Display Staff

 Enter choice:1

--------------------
 1.Teacher
 2.Officer
 3.Reguler Typist
 4.Casual Typist
--------------------
 enter your choice:4

 Enter staff code and name:102 riya

 Enter Speed:78

 Enter daily wages:4500

1.Add Staff Member
2.Display Staff

 Enter choice:2
Designation is:
------------------------------
code is:101
name is:shivangi
Designation is:
grade is:4
Designation is:
------------------------------
code is:102
name is:riya
Designation is:
Speed is:78
Type is:Casual
Daily wages is:4500

1.Add Staff Member
2.Display Staff
3.Exit
 Enter choice:3
