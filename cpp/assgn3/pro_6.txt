Roll No    :6
Name       :Chotaliya Shivangi Dilipbhai
Class	   :MCA-2
Subject    :Object Oriented Concepts & Programming 
======================================================================================
Definition :6) WAP to create base class Book having int id and char name as data members 
	and respective functionality, show following types of inheritance and display 
	the details of  each kind of books, also calculate the total no of each type 
	of books in proper format. Simple inheritance with derived class Sales 
	Hierarchical inheritance with derived classes academics and thrillers Show use
   	of constructor and destructor in above examples of inheritance. 
======================================================================================

#include<iostream>
#include<conio.h>
#include<string>
using namespace std;
ostream & line(ostream &);

class Book
{
protected:
	int id;
	char *name,*book_type;
	float price;

public:
	Book(int id,char *name,float price,char *book_type)
	{
		cout<<line<<"\n Book Class Constructor is call";
		this->id=id;
		this->name=name;
		this->book_type=book_type;
		this->price=price;
	}
	~Book(){
		cout<<line<<"\n Book Class Destructor is call";
		delete []name;
		delete []book_type;
	}
	
};

class Sales : public Book
{
protected:
	int qty;
public:
	Sales(int id,char *name,float price,char *book_type,int qty):Book(id,name,price,book_type)
	{
		cout<<line<<"\n Sales Class Constructor is call";
		this->id=id;
		this->name=name;
		this->price=price;
		this->book_type=book_type;
		this->qty=qty;
	}
	void display_books()
	{
		
		cout<<"\n"<<line<<"\n Book Details \n"<<line;
		cout<<"\n Id is:"<<this->id;
		cout<<"\n Name is:"<<this->name;
		cout<<"\n Price is:"<<this->price;
		cout<<"\n Type:"<<this->book_type;
		cout<<"\n Qty is:"<<this->qty;
		cout<<"\n"<<line;
	}
	~Sales()
	{
		cout<<line<<"\n Sales Class Destructor is call";
		delete []name;
		delete []book_type;
	}
	
};

class Academics : public Book
{

public:
	Academics(int id,char *name,float price):Book(id ,name,price,"Acadamics")
	{
		cout<<"\n Academics  Calss Constructor is call";
	}

	~Academics(){
		cout<<"\n Academics Class Destructor is call";
		delete []name;
		delete []book_type;
	}
};

class Thrillers : public Book
{

public:
	Thrillers(int id,char *name,float price):Book(id ,name,price,"Thrillers")
	{
		cout<<line<<"\n Thrillers Class Constructor is call";
	}

	~Thrillers(){
		cout<<line<<"\n Thrillers  Class Destructor is call";
		delete []name;
		delete []book_type;
	}
	
};

void main()
{
	Book b1(101,"Tom & Jarry",320,"Story");
	Sales s1(101,"Book 1",450,"Programming",5);
	Sales	s2(102,"Book 5",560,"Opps",6);
	s1.display_books();
	Academics a1(103,"Book 2",400);
	Thrillers t1(104,"Book 3",780);

	//s1.display_books();
	getch();
}

ostream & line(ostream &obj)
{
	cout<<"\n";
	for(int i=0;i<50;i++)
	{
		obj<<"-";
	}
	return obj;
}

===============
OUTPUT
===============

--------------------------------------------------
 Book Class Constructor is call
--------------------------------------------------
 Book Class Constructor is call
--------------------------------------------------
 Sales Class Constructor is call
--------------------------------------------------
 Book Class Constructor is call
--------------------------------------------------
 Sales Class Constructor is call

--------------------------------------------------
 Book Details

--------------------------------------------------
 Id is:101
 Name is:Book 1
 Price is:450
 Type:Programming
 Qty is:5

--------------------------------------------------
--------------------------------------------------
 Book Class Constructor is call
 Academics  Calss Constructor is call
--------------------------------------------------
 Book Class Constructor is call
--------------------------------------------------
 Thrillers Class Constructor is call
 