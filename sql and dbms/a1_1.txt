
================================================
				Assignment 1: PL/SQL
================================================


Q.1 Develop the following:
	
	a. Create a procedure that deletes rows from the emp table.
	It should accept 1 parameter, job; only delete the employee’s with that job.
	Display how many employees were deleted. Write a PL/SQL block to invoke the procedure.

	b. Change the above procedure so that it returns the number of Employees removed via an OUT parameter.
	Write a PL/SQL block to invoke the procedure and display how many employees were deleted.


CREATE TABLE IF NOT EXISTS emp1 (empid int(2) PRIMARY KEY, name VARCHAR(30), salary FLOAT, job VARCHAR(15));

INSERT INTO emp1 VALUES(1, 'Ajinkya', 92015, 'Operator');
INSERT INTO emp1 VALUES(2, 'Nirav', 10988, 'Salesman');
INSERT INTO emp1 VALUES(3, 'Pradip', 12522, 'Operator');
INSERT INTO emp1 VALUES(5, 'Nirav Chavda', 44979, 'Manager');
INSERT INTO emp1 VALUES(7, 'Lakshya', 20973, 'Supervisor');
INSERT INTO emp1 VALUES(9, 'Ghanshyam', 20025, 'Supervisor');
INSERT INTO emp1 VALUES(10, 'Maxmuller', 24029, 'Manager');
INSERT INTO emp1 VALUES(11, 'Fredrick', 21966, 'Supervisor');


DELIMITER //
CREATE OR REPLACE PROCEDURE deleteByJob1(IN p_job VARCHAR(15))
BEGIN
DECLARE myCount INT DEFAULT 0;
SELECT COUNT(*) INTO myCount FROM emp1 WHERE job=p_job;
DELETE FROM emp1 WHERE job=p_job;
SELECT myCount AS "Number of employees deleted"; 
END//
DELIMITER ;
CALL deleteByJob1('Operator');


DELIMITER //
CREATE OR REPLACE PROCEDURE deleteByJob2(IN p_job VARCHAR(15), OUT deletedEmp INT)
BEGIN
SELECT COUNT(*) INTO deletedEmp FROM emp1 WHERE job=p_job;
DELETE FROM emp1 WHERE job=p_job;
END//
DELIMITER ;


Q.2 Create a table having the following structure -> Accounts(Account_id, branch_name, amount_balance)  

	a. Write a PL/SQL procedure to perform withdraw operation that only permits a withdrawal if there sufficient funds in the account.
	The procedure should take Account_id and withdrawal amount as input.
	
	b. Write a procedure to deposit money into someone's account. The procedure should accept account_id and deposit amount.


CREATE TABLE IF NOT EXISTS Accounts(Account_id INT, branch_name VARCHAR(20), amount_balance FLOAT);

INSERT INTO Accounts VALUES(603, 'Gandhidham', 370205);
INSERT INTO Accounts VALUES(604, 'Adipur', 654654);
INSERT INTO Accounts VALUES(605, 'Poona', 986551);


DELIMITER //
CREATE OR REPLACE PROCEDURE withdrawFunds(IN u_Account_id INT, IN withdrawAmount FLOAT)
BEGIN
DECLARE account INT;
DECLARE amount FLOAT;
DECLARE message VARCHAR(50) DEFAULT "";
SELECT Account_id, amount_balance INTO account, amount FROM Accounts WHERE Account_id = u_Account_id;
IF account IS NULL THEN
	SET message = CONCAT(message, "Account No. ", u_Account_id ," not found!");
ELSE
	IF withdrawAmount > amount THEN
		SET message = "Insufficient Funds!";
	ELSEIF withdrawAmount < 0 THEN
		SET message = "Withdraw amount should be positive value only!";
	ELSEIF withdrawAmount IS NULL THEN
		SET message = "Withdraw amount cannot be empty!";
	ELSE
		UPDATE Accounts SET amount_balance = amount_balance-withdrawAmount WHERE Account_id=account;
		SET message = CONCAT(message, "Rs. ", withdrawAmount, " withdrawn from Account no. ", account);
		SELECT *, amount AS "Previous Balance" FROM Accounts WHERE Account_id=account;
	END IF;
END IF;
SELECT message;
END//
DELIMITER ;


DELIMITER //
CREATE OR REPLACE PROCEDURE depositMoney(IN u_Account_id INT, IN depositAmount FLOAT)
BEGIN
DECLARE account INT;
DECLARE amount FLOAT;
DECLARE message VARCHAR(50) DEFAULT "";
SELECT Account_id, amount_balance INTO account, amount FROM Accounts WHERE Account_id = u_Account_id;
IF account IS NULL THEN
	SET message = CONCAT(message, "Account No. ", u_Account_id ," not found!");
ELSE
	IF depositAmount IS NULL THEN
		SET message = "Deposit amount cannot be empty!";
	ELSEIF depositAmount < 0 THEN
		SET message = "Deposit amount should be positive value only!";
	ELSE
		UPDATE Accounts SET amount_balance = amount_balance+depositAmount WHERE Account_id=account;
		SET message = CONCAT(message, "Rs. ", depositAmount, " deposited into Account no. ", account);
		SELECT *, amount AS "Previous Balance" FROM Accounts WHERE Account_id=account;
	END IF;
END IF;
SELECT message;
END//
DELIMITER ;

Q.3 Create a table having the following structure -> Accounts(Account_id, branch_name, amount_balance)  
	a. Write a PL/SQL procedure to perform withdraw operation that only permits a withdrawal if there sufficient funds in the account.
	The procedure should take Account_id and withdrawal amount as input.

	b. Write a procedure to transfer money from one person's account to another.
	The procedure should table two account_id’s one for giver and one for receiver and the amount to be transferred. 


CREATE TABLE IF NOT EXISTS Accounts(Account_id INT, branch_name VARCHAR(20), amount_balance FLOAT);

INSERT INTO Accounts VALUES(603, 'Gandhidham', 370205);
INSERT INTO Accounts VALUES(604, 'Adipur', 654654);
INSERT INTO Accounts VALUES(605, 'Poona', 986551);

DELIMITER //
CREATE OR REPLACE PROCEDURE withdrawFunds(IN u_Account_id INT, IN withdrawAmount FLOAT)
BEGIN
DECLARE account INT;
DECLARE amount FLOAT;
DECLARE message VARCHAR(50) DEFAULT "";
SELECT Account_id, amount_balance INTO account, amount FROM Accounts WHERE Account_id = u_Account_id;
IF account IS NULL THEN
	SET message = CONCAT(message, "Account No. ", u_Account_id ," not found!");
ELSE
	IF withdrawAmount > amount THEN
		SET message = "Insufficient Funds!";
	ELSEIF withdrawAmount < 0 THEN
		SET message = "Withdraw amount should be positive value only!";
	ELSEIF withdrawAmount IS NULL THEN
		SET message = "Withdraw amount cannot be empty!";
	ELSE
		UPDATE Accounts SET amount_balance = amount_balance-withdrawAmount WHERE Account_id=account;
		SET message = CONCAT(message, "Rs. ", withdrawAmount, " withdrawn from Account no. ", account);
		SELECT *, amount AS "Previous Balance" FROM Accounts WHERE Account_id=account;
	END IF;
END IF;
SELECT message;
END//
DELIMITER ;


DELIMITER //
CREATE OR REPLACE PROCEDURE transferFunds(IN senderAccount INT, IN receiverAccount INT, transferAmount FLOAT)
BEGIN
DECLARE sAccount, rAccount INT;
DECLARE sAmount, rAmount FLOAT;
DECLARE sMessage, rMessage VARCHAR(50) DEFAULT "";

SELECT Account_id, amount_balance INTO sAccount, sAmount FROM Accounts WHERE Account_id=senderAccount;
SELECT Account_id, amount_balance INTO rAccount, rAmount FROM Accounts WHERE Account_id=receiverAccount;

IF sAccount IS NULL THEN
	SET sMessage = CONCAT(sMessage, "Sender account no. ", senderAccount ," not found!");
ELSEIF rAccount IS NULL THEN
	SET rMessage = CONCAT(rMessage, "Receiver account no. ", receiverAccount ," not found!");
ELSE
	IF transferAmount IS NULL THEN
		SET sMessage = "Transfer Amount cannot be empty!";
	ELSEIF transferAmount < 0 THEN
		SET sMessage = "Transfer amount cannot be a negative value!";
	ELSEIF transferAmount > sAmount THEN
		SET sMessage = "Insufficient Funds!";
	ELSE
		UPDATE Accounts SET amount_balance = amount_balance - transferAmount WHERE Account_id=senderAccount;
		UPDATE Accounts SET amount_balance = amount_balance + transferAmount WHERE Account_id=receiverAccount;
		SET sMessage = CONCAT(sMessage, "Rs. ", transferAmount, " withdrawn from Account no. ", senderAccount);
		SET rMessage = CONCAT(rMessage, "Rs. ", transferAmount, " deposited into Account no. ", receiverAccount);
		SELECT *, sAmount AS "Previous Balance" FROM Accounts WHERE Account_id=sAccount UNION SELECT *, rAmount AS "Previous Balance" FROM Accounts WHERE Account_id=rAccount;
	END IF;
END IF;

SELECT sMessage UNION SELECT rMessage;
END//
DELIMITER ;


Q.6	Create three different procedures and one final procedure to call them as follows
	a.	First procedure check for the number is > 0 or not.
	b.	Second procedure accepts one date argument and check that is < sysdate or not.
	c.	Third procedure accepts a name and check whether it is in uppercase or not.


DELIMITER //
CREATE OR REPLACE PROCEDURE isNaturalNumber(IN num INT)
BEGIN
DECLARE message VARCHAR(30) DEFAULT "";
IF num > 0 THEN
	SET message = CONCAT(message, num, " is greater than 0.");
ELSEIF num < 0 THEN
	SET message = CONCAT(message, num, " is less than 0.");
ELSE
	SET message = CONCAT(message, "Number is 0.");
END IF;
SELECT message AS "Result";
END//
DELIMITER ;

DELIMITER //
CREATE OR REPLACE PROCEDURE dateCompare(IN userDate DATE)
BEGIN
DECLARE result INT;
DECLARE message VARCHAR(50) DEFAULT "";
SET result = DATEDIFF(userDate, CURRENT_DATE);
IF result > 0 THEN
	SET message = CONCAT(message, userDate, " is greater than ", CURRENT_DATE);
ELSEIF result < 0 THEN
	SET message = CONCAT(message, userDate, " is less than ", CURRENT_DATE);
ELSE
	SET message = "Both dates are same.";
END IF;
SELECT message;
END//
DELIMITER ;
CALL dateCompare('2020-04-05');


DELIMITER //
CREATE OR REPLACE PROCEDURE checkUpperCase(IN name VARCHAR(15))
BEGIN
DECLARE i, len INT DEFAULT 1;
DECLARE temp VARCHAR(1);
DECLARE isUpper BOOLEAN DEFAULT true;
SET len = LENGTH(name);
WHILE isUpper AND i <= len DO
SET temp = substr(name, i, 1);
IF ASCII(temp) >= 97 AND ASCII(temp) <= 122 THEN
	SET isUpper = false;
END IF;
SET i = i + 1; 
END WHILE;
IF isUpper THEN
	SELECT CONCAT(name, " is in uppercase...") AS "Message";
ELSE
	SELECT CONCAT(name, " is not in uppercase...") AS "Message";
END IF;
END//
DELIMITER ;
CALL checkUpperCase('NIRAv');

DELIMITER //
CREATE OR REPLACE PROCEDURE myMenu()
BEGIN
CALL isNaturalNumber(@arg1);
CALL dateCompare(@arg2);
CALL checkUpperCase(@arg3);
END//
DELIMITER ;



Q.7	Write a procedure to display first n fibonacci numbers.


DELIMITER //
CREATE OR REPLACE PROCEDURE fibonacci(IN n INT)
BEGIN
DECLARE count INTEGER DEFAULT 0;
DECLARE firstTerm, nextTerm INT DEFAULT 0;
DECLARE secondTerm INT DEFAULT 1;
DECLARE myStr VARCHAR(100) DEFAULT '';
REPEAT
SET myStr = CONCAT(myStr, firstTerm, ", ");
SET nextTerm = firstTerm + secondTerm;
SET firstTerm = secondTerm;
SET secondTerm = nextTerm;
SET count = count + 1;
UNTIL count=n
END REPEAT;
SELECT myStr AS "Fibonacci Series";
END//
DELIMITER ;

Q.8	Write a procedure to find simple interest.


DELIMITER //
CREATE OR REPLACE PROCEDURE simpleInterest(IN p FLOAT, IN r FLOAT, IN n FLOAT, OUT simple FLOAT)
BEGIN
SET simple = (p * r * n) / 100;
END//
DELIMITER ;
SET @principle = 10000;
SET @rate = 2.5;
SET @time = 4.5;
CALL simpleInterest(@principle, @rate, @time, @simple);
SELECT CONCAT("Rs. ", @simple) AS "Simple Interest";

Q.9	Write a procedure to reverse entered number.


DELIMITER //
CREATE OR REPLACE PROCEDURE reverseNum(IN num INT)
BEGIN
DECLARE reversedNum, remainder INT DEFAULT 0;
WHILE num<>0 DO
SET remainder = MOD(num, 10);
SET reversedNum = (reversedNum * 10) + remainder;
SET num = num DIV 10;
END WHILE;
SELECT reversedNum;
END//
DELIMITER ;



Q.10 Write a procedure and find its equivalent roman value.


DELIMITER //
CREATE OR REPLACE PROCEDURE romanNum(IN num INT)
BEGIN
DECLARE num2 INT;
DECLARE str VARCHAR(20) DEFAULT '';
SET num2 = num;
WHILE num2<>0
DO
CASE
WHEN num2 >= 1000
THEN
SET str = CONCAT(str, "M");
SET num2 = num2 - 1000;
WHEN num2 >= 900
THEN
SET str = CONCAT(str, "CM");
SET num2 = num2 - 900;
WHEN num2 >= 500
THEN
SET str = CONCAT(str, "D");
SET num2 = num2 - 500;
WHEN num2 >= 400
THEN
SET str = CONCAT(str, "CD");
SET num2 = num2 - 400;
WHEN num2 >= 100
THEN
SET str = CONCAT(str, "C");
SET num2 = num2 - 100;
WHEN num2 >= 90
THEN
SET str = CONCAT(str, "XC");
SET num2 = num2 - 90;
WHEN num2 >= 50
THEN
SET str = CONCAT(str, "L");
SET num2 = num2 - 50;
WHEN num2 >= 40
THEN
SET str = CONCAT(str, "XL");
SET num2 = num2 - 40;
WHEN num2 >= 10
THEN
SET str = CONCAT(str, "X");
SET num2 = num2 - 10;
WHEN num2 >= 9
THEN
SET str = CONCAT(str, "IX");
SET num2 = num2 - 9;
WHEN num2 >= 5
THEN
SET str = CONCAT(str, "V");
SET num2 = num2 - 5;
WHEN num2 >= 4
THEN
SET str = CONCAT(str, "IV");
SET num2 = num2 - 4;
ELSE
SET str = CONCAT(str, "I");
SET num2 = num2 - 1;
END CASE;
END WHILE;
SELECT str;
END//
DELIMITER ;

Q.11 Write a program to enter a number and find addition of each digit of that number using function.


DELIMITER //
CREATE OR REPLACE FUNCTION addDigits(num INT) RETURNS INT
BEGIN
DECLARE result, remainder INT DEFAULT 0;
WHILE num <> 0 DO
	SET remainder = MOD(num, 10);
	SET result = result + remainder;
	SET num = num DIV 10;
END WHILE;
RETURN result;
END//
DELIMITER ;

Q. 12 Write a program to input your birthdate and should return your age in year, month and days.

DELIMITER //
CREATE OR REPLACE PROCEDURE calculateAge(IN birthdate DATE)
BEGIN
DECLARE dd, u_dd, r_dd, mm, u_mm, r_mm, yy, u_yy, r_yy INT;
IF birthdate IS NULL THEN
	SELECT "Invalid Date!" AS "Error";
ELSEIF DATEDIFF(birthdate, CURRENT_DATE) > 0 THEN
	SELECT "Birthdate cannot be greater than Current Date" AS "Error";
ELSE
	SET dd = EXTRACT(DAY from CURRENT_DATE);
	SET mm = EXTRACT(MONTH from CURRENT_DATE);
	SET yy = EXTRACT(YEAR from CURRENT_DATE);
	SET u_dd = EXTRACT(DAY from birthdate);
	SET u_mm = EXTRACT(MONTH from birthdate);
	SET u_yy = EXTRACT(YEAR from birthdate);

	SET r_yy = yy - u_yy;
	IF u_mm > mm THEN
		SET r_mm = 12 - (u_mm - mm);
		SET r_yy = r_yy - 1;
	ELSE
	SET r_mm = mm - u_mm;
	END IF;

	IF u_dd > dd THEN
		SET r_dd = EXTRACT(DAY FROM LAST_DAY(birthdate)) - (u_dd - dd);
		SET r_mm = r_mm - 1;
	ELSE
	SET r_dd = dd - u_dd;
	END IF;
	SELECT CONCAT(r_dd, " days, ", r_mm, " months, ", r_yy, " years.") AS "AGE";
END IF;
END//
DELIMITER ;


Q. 13 Write a program to reverse the string.

DELIMITER //
CREATE OR REPLACE PROCEDURE reverseStr(IN userString VARCHAR(15))
BEGIN
SELECT REVERSE(userString);
END//
DELIMITER ;


DELIMITER //
CREATE OR REPLACE PROCEDURE reverseString(IN userString VARCHAR(15))
BEGIN
DECLARE start, stop INT;
DECLARE swap VARCHAR(1);
SET start = 1;
SET stop = LENGTH(userString);
WHILE start < stop DO
	SET swap = substr(userString, start, 1);
	SET userString = INSERT(userString, start, 1, substr(userString, stop, 1));
	SET userString = INSERT(userString, stop, 1, swap);
	SET start = start + 1;
	SET stop = stop - 1;
END WHILE;
SELECT userString;
END//
DELIMITER ;


Q.14 Write a program to convert the string into toggle case.

DELIMITER //
CREATE OR REPLACE PROCEDURE toggleString(IN userString VARCHAR(20))
BEGIN
DECLARE start, stop INT DEFAULT 1;
DECLARE temp INT;
SET stop = LENGTH(userString);
WHILE start <= stop DO
SET temp = ASCII(substr(userString, start, 1));
	IF temp >= 65 AND temp <= 90 THEN
		SET temp = temp + 32;
		SET userString = INSERT(userString, start, 1, CHAR(temp));
	ELSEIF temp >= 97 AND temp <= 122 THEN
		SET temp = temp - 32;
		SET userString = INSERT(userString, start, 1, CHAR(temp));
	END IF;
	SET start = start + 1;
END WHILE;
SELECT userString AS "Toggled String";
END//
DELIMITER ;


Q. 15 Write a PL/SQL block to convert given numbers into text words

DELIMITER //
CREATE OR REPLACE PROCEDURE numToText(IN userNumber INT)
BEGIN
DECLARE numInText VARCHAR(100) DEFAULT " ";
DECLARE power, remainder INT;
REPEAT
	SET remainder = MOD(userNumber, 10);

	CASE
	WHEN remainder = 0 THEN
		SET numInText = INSERT(numInText, 1, 0, "Zero ");
	WHEN remainder = 1 THEN
		SET numInText = INSERT(numInText, 1, 0, "One ");
	WHEN remainder = 2 THEN
		SET numInText = INSERT(numInText, 1, 0, "Two ");
	WHEN remainder = 3 THEN
		SET numInText = INSERT(numInText, 1, 0, "Three ");
	WHEN remainder = 4 THEN

		SET numInText = INSERT(numInText, 1, 0, "Four ");
	WHEN remainder = 5 THEN
		SET numInText = INSERT(numInText, 1, 0, "Five ");
	WHEN remainder = 6 THEN
		SET numInText = INSERT(numInText, 1, 0, "Six ");
	WHEN remainder = 7 THEN
		SET numInText = INSERT(numInText, 1, 0, "Seven ");
	WHEN remainder = 8 THEN
		SET numInText = INSERT(numInText, 1, 0, "Eight ");
	WHEN remainder = 9 THEN
		SET numInText = INSERT(numInText, 1, 0, "Nine ");
	END CASE;

	SET userNumber = userNumber DIV 10;
UNTIL userNumber = 0
END REPEAT;
SELECT numInText AS "Number in Text";
END//
DELIMITER ;